#pragma once
#include <format>

namespace plotpp{
	class Color{
	public:
		constexpr Color() = default;
		
		constexpr Color(uint8_t red, uint8_t green, uint8_t blue)
			: red_(red)
			, green_(green)
			, blue_(blue)
		{}
		
		constexpr Color(uint32_t rgb) 
			: Color((rgb >> 16) & 0xFF, (rgb >> 8) & 0xFF, rgb & 0xFF)
		{}
		
		constexpr uint8_t red() const {return this->red_;}
		constexpr uint8_t green() const {return this->green_;}
		constexpr uint8_t blue() const {return this->blue_;}
		
		constexpr Color& red(uint8_t red) {this->red_ = red; return *this;}
		constexpr Color& green(uint8_t green) {this->green_ = green; return *this;}
		constexpr Color& blue(uint8_t blue) {this->blue_ = blue; return *this;}

		inline std::string to_hex() const {
			return std::format("{:02x}{:02x}{:02x}", this->red(), this->green(), this->blue());
		}
		
	private:
		uint8_t red_ = 0;
		uint8_t green_ = 0;
		uint8_t blue_ = 0;
	};
	
	
	
	
	namespace colors{
		
		// Many thanks to : https://github.com/Gnuplotting/gnuplot-palettes
		// For the Color Palettes
		
		// The original color palettes have been defined in gnuplot scripts
		// so I cannot really use the original files and copied the data here
		
		// TODO: re-sample the color palettes, so that all have 9 elements
		
		// --------------- special color ranges ---------------
		
		constexpr std::array<Color, 9> magma{0x000004, 0x1c1044, 0x4f127b, 0x812581, 0xb5367a, 0xe55964, 0xfb8761, 0xfec287, 0xfbfdbf};
		constexpr std::array<Color, 9> inferno{0x000004, 0x1f0c48, 0x550f6d, 0x88226a, 0xa83655, 0xe35933, 0xf9950a, 0xf8c932, 0xfcffa4};
		constexpr std::array<Color, 9> viridis{0x440154, 0x472c7a, 0x3b518b, 0x2c718e, 0x21908d, 0x27ad81, 0x5cc863, 0xaadc32, 0xfde725};
		constexpr std::array<Color, 9> plasma{0x0c0887, 0x4b03a1, 0x7d03a8, 0xa82296, 0xcb4679, 0xe56b5d, 0xf89441, 0xfdc328, 0xf0f921};
		constexpr std::array<Color, 9> jet{0x000080, 0x0000ff, 0x0080ff, 0x00ffff, 0x80ff80, 0xffff00, 0xff8000, 0xff0000, 0x800000};
		constexpr std::array<Color, 8> bentcoolwarm{0x5548c1, 0x7982d7, 0xabb8e7, 0xdde3ef, 0xead3c6, 0xdba188, 0xca6b55, 0xb10027};
		constexpr std::array<Color, 8> moreland{0x3b4cc0, 0x688aef, 0x99baff, 0xc9d8ef, 0xedd1c2, 0xf7a789, 0xe36a53, 0xb40426};
		constexpr std::array<Color, 8> chromajs{0xffffe0, 0xffdfb8, 0xffbc94, 0xff9777, 0xff6962, 0xee4256, 0xd21f47, 0xb0062c, 0x8b0000};
		constexpr std::array<Color, 9> parula{0x352a87, 0x0f5cdd, 0x1481d6, 0x06a4ca, 0x2eb7a4, 0x87bf77, 0xd1bb59, 0xfec832, 0xf9fb0e};
		constexpr std::array<Color, 10> sand{0x604860, 0x784860, 0xa86060, 0xc07860, 0xf0a848, 0xf8ca8c, 0xfeecae, 0xfff4c2, 0xfff7db, 0xfffcf6};
		
		
		// --------------- qualitative color sets ----------------

		constexpr std::array<Color, 10> qualitative_set1{0x1f77b4, 0xff7f0e, 0x2ca02c, 0xd62728, 0x9467bd, 0x8c564b, 0xe377c2, 0x7f7f7f, 0xbcbd22, 0x17becf};
		constexpr std::array<Color, 10> qualitative_set1_light{0xaec7e8, 0xffbb78, 0x98df8a, 0xff9896, 0xc5b0d5, 0xc49c94, 0xf7b6d2, 0xc7c7c7, 0xdbdb8d, 0x9edae5};
		constexpr std::array<Color, 9> qualitative_set2{0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xa65628, 0xf781bf, 0x999999, 0xffff33};
		constexpr std::array<Color, 9> qualitative_set2_light{0xff4244, 0x5fa6e0, 0x75d772, 0xc076cb, 0xffa728, 0xce7e50, 0xffa9e7, 0xc1c1c1, 0xffff5b};
		constexpr std::array<Color, 8> qualitative_set3{0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b3};
		constexpr std::array<Color, 8> matlab{0x0072bd, 0xd95319, 0xedb120, 0x7e2f8e, 0x77ac30, 0x4dbeee, 0xa2142f};
	
		
		// ---------------- color fades -------------------
		// ---------------- divergin colors ----------------- 
		// TODO: seperate & rename accordingly
		
		constexpr std::array<Color, 8> blues{0xF7FBFF, 0xDEEBF7, 0xC6DBEF, 0x9ECAE1, 0x6BAED6, 0x4292C6, 0x2171B5, 0x084594};
		constexpr std::array<Color, 8> brown_white_bluegreen{0x8C510A, 0xBF812D, 0xDFC27D, 0xF6E8C3, 0xC7EAE5, 0x80CDC1, 0x35978F, 0x01665E};
		constexpr std::array<Color, 8> blue_green{0xF7FCFD, 0xE5F5F9, 0xCCECE6, 0x99D8C9, 0x66C2A4, 0x41AE76, 0x238B45, 0x005824};
		constexpr std::array<Color, 8> blue_purple{0xF7FCFD, 0xE0ECF4, 0xBFD3E6, 0x9EBCDA, 0x8C96C6, 0x8C6BB1, 0x88419D, 0x6E016B};
		constexpr std::array<Color, 8> green_blue{0xF7FCF0, 0xE0F3DB, 0xCCEBC5, 0xA8DDB5, 0x7BCCC4, 0x4EB3D3, 0x2B8CBE, 0x08589E};
		constexpr std::array<Color, 10> green_purple{0x396353, 0x0db14b, 0x6dc067, 0xabd69b, 0xdaeac1, 0xdfcce4, 0xc7b2d6, 0x9474b4, 0x754098, 0x504971};
		constexpr std::array<Color, 8> greens{0xF7FCF5, 0xE5F5E0, 0xC7E9C0, 0xA1D99B, 0x74C476, 0x41AB5D, 0x238B45, 0x005A32};
		constexpr std::array<Color, 8> greys{0xFFFFFF, 0xF0F0F0, 0xD9D9D9, 0xBDBDBD, 0x969696, 0x737373, 0x525252, 0x252525};
		constexpr std::array<Color, 9> oranges{0xFFF5EB, 0xFEE6CE, 0xFDD0A2, 0xFDAE6B, 0xFD8D3C, 0xF16913, 0xD94801, 0x8C2D04};
		constexpr std::array<Color, 9> orange_red{0xFFF7EC, 0xFEE8C8, 0xFDD49E, 0xFDBB84, 0xFC8D59, 0xEF6548, 0xD7301F, 0x990000};
		constexpr std::array<Color, 8> yellow_orange_red{0xFFFFCC, 0xFFEDA0, 0xFED976, 0xFEB24C, 0xFD8D3C, 0xFC4E2A, 0xE31A1C, 0xB10026};
		constexpr std::array<Color, 8> yellow_orange_brown{0xFFFFE5, 0xFFF7BC, 0xFEE391, 0xFEC44F, 0xFE9929, 0xEC7014, 0xCC4C02, 0x8C2D04};
		constexpr std::array<Color, 8> yellow_green_blue{0xFFFFD9, 0xEDF8B1, 0xC7E9B4, 0x7FCDBB, 0x41B6C4, 0x1D91C0, 0x225EA8, 0x0C2C84};
		constexpr std::array<Color, 9> yellow_green{0xFFFFE5, 0xF7FCB9, 0xD9F0A3, 0xADDD8E, 0x78C679, 0x41AB5D, 0x238443, 0x005A32};
		constexpr std::array<Color, 9> turbo{0x30123b, 0x466be3, 0x28bceb, 0x32f298, 0xa4fc3c, 0xeecf3a, 0xfb7e21, 0xd02f05, 0x7a0403};
		constexpr std::array<Color, 9> rainbow{0xD53E4F, 0xF46D43, 0xFDAE61, 0xFEE08B, 0xE6F598, 0xABDDA4, 0x66C2A5, 0x3288BD};
		constexpr std::array<Color, 8> reds{0xFFF5F0, 0xFEE0D2, 0xFCBBA1, 0xFC9272, 0xFB6A4A, 0xEF3B2C, 0xCB181D, 0x99000D};
		constexpr std::array<Color, 8> red_yellow_green{0xD73027, 0xF46D43, 0xFDAE61, 0xFEE08B, 0xD9EF8B, 0xA6D96A, 0x66BD63, 0x1A9850};
		constexpr std::array<Color, 9> red_yellow_blue{0xD73027, 0xF46D43, 0xFDAE61, 0xFEE090, 0xE0F3F8, 0xABD9E9, 0x74ADD1, 0x4575B4};
		constexpr std::array<Color, 8> red_purple{0xFFF7F3, 0xFDE0DD, 0xFCC5C0, 0xFA9FB5, 0xF768A1, 0xDD3497, 0xAE017E, 0x7A0177};
		constexpr std::array<Color, 9> red_white_grey{0xB2182B, 0xD6604D, 0xF4A582, 0xFDDBC7, 0xE0E0E0, 0xBABABA, 0x878787, 0x4D4D4D};
		constexpr std::array<Color, 8> red_white_blue{0xB2182B, 0xD6604D, 0xF4A582, 0xFDDBC7, 0xD1E5F0, 0x92C5DE, 0x4393C3, 0x2166AC};
		constexpr std::array<Color, 8> purples{0xFCFBFD, 0xEFEDF5, 0xDADAEB, 0xBCBDDC, 0x9E9AC8, 0x807DBA, 0x6A51A3, 0x4A1486};
		constexpr std::array<Color, 8> purple_red{0xF7F4F9, 0xE7E1EF, 0xD4B9DA, 0xC994C7, 0xDF65B0, 0xE7298A, 0xCE1256, 0x91003F};
		constexpr std::array<Color, 8> orange_white_purple{0xB35806, 0xE08214, 0xFDB863, 0xFEE0B6, 0xD8DAEB, 0xB2ABD2, 0x8073AC, 0x542788};
		constexpr std::array<Color, 8> purple_blue_green{0xFFF7FB, 0xECE2F0, 0xD0D1E6, 0xA6BDDB, 0x67A9CF, 0x3690C0, 0x02818A, 0x016540};
		constexpr std::array<Color, 8> purple_blue{0xFFF7FB, 0xECE7F2, 0xD0D1E6, 0xA6BDDB, 0x74A9CF, 0x3690C0, 0x0570B0, 0x034E7B};
		constexpr std::array<Color, 8> purple_white_green{0x762A83, 0x9970AB, 0xC2A5CF, 0xE7D4E8, 0xD9F0D3, 0xA6DBA0, 0x5AAE61, 0x1B7837};
		
		constexpr std::array<Color, 9> pink_white_yellowgreen{0xC51B7D, 0xDE77AE, 0xF1B6DA, 0xFDE0EF, 0xE6F5D0, 0xB8E186, 0x7FBC41, 0x4D922};
		constexpr std::array<Color, 9> {0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x};
		
		
		
		
	}
}