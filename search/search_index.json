{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Plotpp","text":""},{"location":"#plotpp","title":"Plotpp","text":"<p>A plotting library for C++ that uses Gnuplot as a backend. Allows plotting from custom containers/vectors if they use <code>begin()</code> and <code>end()</code> iterators as well as plotting from built in arrays.</p> <p>Documentation</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Gnuplot: Homepage Windows Download Linux install: Note: The project can be build without gnuplot,     since this library will only communicate with gnuplot through pipes.      But you will need gnuplot to display the graphical plots.</li> <li>C++20</li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<p>All dependencies are managed by the CMake scripts using CPM.  The dependencies will be automatically downloaded, build and linked to the project - if not already know by CMake. - {fmt}: GitHub, Documentation, Conan</p>"},{"location":"#features","title":"Features","text":""},{"location":"#plotting-styles","title":"Plotting Styles","text":"<ul> <li>Line/filled Line/filled Curves</li> <li>Poins/Scatter/XError/YError/XYError</li> <li>Arrows/Vectors/Quiver</li> <li>Heatmap</li> <li>Boxes</li> <li>Boxplot</li> <li>Circle</li> <li>Pie-Charts</li> <li>Impulses</li> <li>Steps/filled Steps</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>You can see all examples in the <code>examples/</code> folder.</p>"},{"location":"#line-plot","title":"Line Plot","text":"<pre><code>int main() {\n    using namespace plotpp;\n\n    {\n        std::vector&lt;double&gt; x(20);\n        for(size_t i=0; i &lt; x.size(); ++i) x[i] = i;\n\n        std::vector&lt;double&gt; y1(20);\n        for(size_t i=0; i &lt; y1.size(); ++i) y1[i] = 1./i*30;\n\n        Figure fig(\"Line Plot from XY\");\n        fig.add(line(&amp;x, &amp;y1).label(\"1/x*30\"));\n        fig.show();\n    }\n}\n</code></pre>"},{"location":"#integration","title":"Integration","text":""},{"location":"#cmake","title":"CMake","text":"<pre><code>cmake_minimum_required(VERSION 3.15)\nproject(PROJECT_NAME CXX)\n\nfind_package(plotpp CONFIG REQUIRED)\n\nadd_executable(main src/main.cpp)\ntarget_link_libraries(main plotpp::plotpp)\n</code></pre>"},{"location":"#conan-to-be-done","title":"Conan TO be done","text":"<p><code>conanfile.txt</code></p> <pre><code>[requires]\nplotpp/&lt;version&gt;\n\n[generators]\nCMakeDeps\nCMakeToolchain\n\n[layout]\ncmake_layout\n</code></pre> <p><code>conanfile.py</code></p> <pre><code>from conan import ConanFile\nfrom conan.tools.cmake import cmake_layout\n\n\nclass ExampleRecipe(ConanFile):\n    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n    generators = \"CMakeDeps\", \"CMakeToolchain\"\n\n    def requirements(self):\n        self.requires(\"plotpp/&lt;version&gt;\")\n\n    def layout(self):\n        cmake_layout(self)\n</code></pre> <p>build instructions with conan</p> <pre><code># install dependencies\nconan install . --build=missing --output-folder build\n\n# Optional: set your prefered compile\nset CC=&lt;path/to/C-compiler&gt;\nset CXX=&lt;path/to/C++-compiler&gt;\nset LD=&lt;path/to/Linker&gt;\n\n# generate build scripts (for the build tool e.g.: -G \"Ninja Multi-Config\")\ncmake -S . -B build -DBUILD_EXAMPLES=ON -DCMAKE_TOOLCHAIN_FILE=build/Release/generators/conan_toolchain.cmake\n\n# build the project\ncmake --build build_gcc --config Release\n</code></pre>"},{"location":"#conan-faq","title":"Conan FAQ","text":"<ul> <li>How can I make Conan use a different CMake generator?     Add to your profile:     <code>[conf]     tools.cmake.cmaketoolchain:generator=Ninja</code></li> <li>Conan selects the wrong compiler?     Add to your profile:     <code>[conf]     tools.build:compiler_executables={\"c\" : \"gcc\", \"cpp\" : \"g++\"}</code>     or:     <code>[buildenv]     CC=gcc     CXX=g++     LD=ld</code></li> <li>Where can I find the default profile?     <code>bash     conan profile path default</code></li> <li>I want to create a library but with <code>conan create . --build=missing</code> it cannot find the header files     Enable transitive headers in your <code>conanfile.py</code>:     <code>py     def requirements(self):         self.requires(\"&lt;library/version&gt;\", transitive_headers=True)</code></li> </ul>"},{"location":"#manually-with-add_subdirectory","title":"Manually with add_subdirectory","text":"<p>Manually download the library and add it via <code>add_subdirectory</code>.</p> <pre><code>add_subdirectory(path/to/Plotpp)\nadd_executable(PROJECT_NAME main.cpp)\ntarget_link_libraries(YOUR_PROJECT_NAME PUBLIC plotpp)\n</code></pre> <p>Note: you would also need to add and link against fmt</p>"},{"location":"#manual-build","title":"Manual Build","text":"<ul> <li>include the folder containing <code>plotpp.hpp</code></li> <li>compile and link all <code>*.cpp</code> files in <code>plotpp/</code></li> </ul>"},{"location":"plotting_styles/plotting_styles/","title":"Plotting Styles","text":"<p>There will be more in the future - promise.</p> Line Plot Point Plot"}]}